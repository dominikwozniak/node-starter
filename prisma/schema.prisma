// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  email           String?   @unique
  name            String?
  password        String?

  confirmed       Boolean   @default(false)
  oauth           Boolean   @default(false)
  githubId        String?   @unique

  conversations   ConversationUser[]
  messages        ConversationMessage[]
  posts           Post[]
  comments        Comment[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ConversationMessage {
  id              Int           @id @default(autoincrement())
  text            String
  read            Boolean       @default(false)

  userId          Int
  author          User          @relation(fields: [userId], references: [id])
  conversationId  Int
  conversation    Conversation  @relation(fields: [conversationId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Conversation {
  id              Int       @id @default(autoincrement())
  name            String?
  isPrivate       Boolean   @default(false)
  participants    ConversationUser[]
  messages        ConversationMessage[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ConversationUser {
  conversationId  Int
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  userId          Int
  user            User         @relation(fields: [userId], references: [id])

  @@id([userId, conversationId])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  comments  Comment[]

  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String

  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
